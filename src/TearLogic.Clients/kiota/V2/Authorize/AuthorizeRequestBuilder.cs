// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using TearLogic.Clients.Models.Common;
using TearLogic.Clients.Models.V2Authorize;
namespace TearLogic.Clients.V2.Authorize
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\authorize
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AuthorizeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.V2.Authorize.AuthorizeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthorizeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/authorize", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.V2.Authorize.AuthorizeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthorizeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/authorize", rawUrl)
        {
        }
        /// <summary>
        /// Authorize a client using client ID and client secret. Returns a bearer token to be used in subsequent requests. The client ID and client secret are provided by CB Insights. To receive your client ID and client secret, please contact your Customer Success Manager or email info@cbinsights.com.
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Authorize.AuthorizeResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::TearLogic.Clients.Models.Common.ErrorWithCode">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::TearLogic.Clients.Models.V2Authorize.AuthorizeResponse?> PostAsync(global::TearLogic.Clients.Models.V2Authorize.AuthorizeRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::TearLogic.Clients.Models.V2Authorize.AuthorizeResponse> PostAsync(global::TearLogic.Clients.Models.V2Authorize.AuthorizeRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::TearLogic.Clients.Models.Common.ErrorWithCode.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::TearLogic.Clients.Models.V2Authorize.AuthorizeResponse>(requestInfo, global::TearLogic.Clients.Models.V2Authorize.AuthorizeResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Authorize a client using client ID and client secret. Returns a bearer token to be used in subsequent requests. The client ID and client secret are provided by CB Insights. To receive your client ID and client secret, please contact your Customer Success Manager or email info@cbinsights.com.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::TearLogic.Clients.Models.V2Authorize.AuthorizeRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::TearLogic.Clients.Models.V2Authorize.AuthorizeRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.V2.Authorize.AuthorizeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::TearLogic.Clients.V2.Authorize.AuthorizeRequestBuilder WithUrl(string rawUrl)
        {
            return new global::TearLogic.Clients.V2.Authorize.AuthorizeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AuthorizeRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
