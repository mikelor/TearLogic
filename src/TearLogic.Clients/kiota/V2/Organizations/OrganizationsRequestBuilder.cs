// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using TearLogic.Clients.Models.Common;
using TearLogic.Clients.Models.V2OrganizationLookup;
using TearLogic.Clients.V2.Organizations.Item;
namespace TearLogic.Clients.V2.Organizations
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\organizations
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OrganizationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the TearLogic.Clients.v2.organizations.item collection</summary>
        /// <param name="position">CB Insights organization ID</param>
        /// <returns>A <see cref="global::TearLogic.Clients.V2.Organizations.Item.WithOrgItemRequestBuilder"/></returns>
        public global::TearLogic.Clients.V2.Organizations.Item.WithOrgItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("orgId", position);
                return new global::TearLogic.Clients.V2.Organizations.Item.WithOrgItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the TearLogic.Clients.v2.organizations.item collection</summary>
        /// <param name="position">CB Insights organization ID</param>
        /// <returns>A <see cref="global::TearLogic.Clients.V2.Organizations.Item.WithOrgItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::TearLogic.Clients.V2.Organizations.Item.WithOrgItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("orgId", position);
                return new global::TearLogic.Clients.V2.Organizations.Item.WithOrgItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.V2.Organizations.OrganizationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OrganizationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/organizations", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.V2.Organizations.OrganizationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OrganizationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/organizations", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of organizations with basic information about those organizations, based on the parameters defined in the request body. This endpoint never charges credits. You can use this endpoint to match CBI organizations with your own data prior to spending credits on them.
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2OrganizationLookup.OrgLookupResponse"/></returns>
        /// <param name="body">Search parameters to lookup a list of organization profiles. You must pass at least one search parameter.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::TearLogic.Clients.Models.Common.ErrorWithCode">When receiving a 400 status code</exception>
        /// <exception cref="global::TearLogic.Clients.Models.Common.ErrorWithCode">When receiving a 403 status code</exception>
        /// <exception cref="global::TearLogic.Clients.Models.Common.ErrorWithCode">When receiving a 424 status code</exception>
        /// <exception cref="global::TearLogic.Clients.Models.Common.ErrorWithCode">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::TearLogic.Clients.Models.V2OrganizationLookup.OrgLookupResponse?> PostAsync(global::TearLogic.Clients.Models.V2OrganizationLookup.OrgLookupRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::TearLogic.Clients.Models.V2OrganizationLookup.OrgLookupResponse> PostAsync(global::TearLogic.Clients.Models.V2OrganizationLookup.OrgLookupRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::TearLogic.Clients.Models.Common.ErrorWithCode.CreateFromDiscriminatorValue },
                { "403", global::TearLogic.Clients.Models.Common.ErrorWithCode.CreateFromDiscriminatorValue },
                { "424", global::TearLogic.Clients.Models.Common.ErrorWithCode.CreateFromDiscriminatorValue },
                { "500", global::TearLogic.Clients.Models.Common.ErrorWithCode.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::TearLogic.Clients.Models.V2OrganizationLookup.OrgLookupResponse>(requestInfo, global::TearLogic.Clients.Models.V2OrganizationLookup.OrgLookupResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of organizations with basic information about those organizations, based on the parameters defined in the request body. This endpoint never charges credits. You can use this endpoint to match CBI organizations with your own data prior to spending credits on them.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Search parameters to lookup a list of organization profiles. You must pass at least one search parameter.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::TearLogic.Clients.Models.V2OrganizationLookup.OrgLookupRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::TearLogic.Clients.Models.V2OrganizationLookup.OrgLookupRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.V2.Organizations.OrganizationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::TearLogic.Clients.V2.Organizations.OrganizationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::TearLogic.Clients.V2.Organizations.OrganizationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class OrganizationsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
