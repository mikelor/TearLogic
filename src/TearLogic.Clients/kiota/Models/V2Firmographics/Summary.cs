// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Firmographics
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Summary : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Any additional websites the organization may have.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AdditionalUrls { get; set; }
#nullable restore
#else
        public List<string> AdditionalUrls { get; set; }
#endif
        /// <summary>The organization&apos;s geographical location.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Firmographics.Address? Address { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Firmographics.Address Address { get; set; }
#endif
        /// <summary>Other names this organization may operate under.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Aliases { get; set; }
#nullable restore
#else
        public List<string> Aliases { get; set; }
#endif
        /// <summary>A description regarding who they are and what they do.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The year this organization was founded.</summary>
        public int? FoundedYear { get; set; }
        /// <summary>If this organization is an investor, this will denote the type of investing organization. See https://api-docs.cbinsights.com/docs/reference/investor_type/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvestorCategory { get; set; }
#nullable restore
#else
        public string InvestorCategory { get; set; }
#endif
        /// <summary>If this organization is an investor, denotes the corresponding Investor Type ID documented at https://api-docs.cbinsights.com/docs/reference/investor_type/</summary>
        public int? InvestorCategoryId { get; set; }
        /// <summary>Name(s) under which this organization is legally registered.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? LegalNames { get; set; }
#nullable restore
#else
        public List<string> LegalNames { get; set; }
#endif
        /// <summary>The organization&apos;s name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The organization&apos;s CB Insights profile URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfileUrl { get; set; }
#nullable restore
#else
        public string ProfileUrl { get; set; }
#endif
        /// <summary>The type of investment stage that most recently occurred.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Stage { get; set; }
#nullable restore
#else
        public string Stage { get; set; }
#endif
        /// <summary>Organization status: Alive / Active, Acquired, Assets Purchased, Dead / Inactive, IPO / Went public, or Merged.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>CBI organization status identifier; see https://api-docs.cbinsights.com/docs/reference/org_status/</summary>
        public int? StatusId { get; set; }
        /// <summary>The organization&apos;s website.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>Whether this organization has received venture capital funding.</summary>
        public bool? VcBacked { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Firmographics.Summary"/> and sets the default values.
        /// </summary>
        public Summary()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Firmographics.Summary"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Firmographics.Summary CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Firmographics.Summary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "additionalUrls", n => { AdditionalUrls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "address", n => { Address = n.GetObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Address>(global::TearLogic.Clients.Models.V2Firmographics.Address.CreateFromDiscriminatorValue); } },
                { "aliases", n => { Aliases = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "foundedYear", n => { FoundedYear = n.GetIntValue(); } },
                { "investorCategory", n => { InvestorCategory = n.GetStringValue(); } },
                { "investorCategoryId", n => { InvestorCategoryId = n.GetIntValue(); } },
                { "legalNames", n => { LegalNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "profileUrl", n => { ProfileUrl = n.GetStringValue(); } },
                { "stage", n => { Stage = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "statusId", n => { StatusId = n.GetIntValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "vcBacked", n => { VcBacked = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("additionalUrls", AdditionalUrls);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Address>("address", Address);
            writer.WriteCollectionOfPrimitiveValues<string>("aliases", Aliases);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("foundedYear", FoundedYear);
            writer.WriteStringValue("investorCategory", InvestorCategory);
            writer.WriteIntValue("investorCategoryId", InvestorCategoryId);
            writer.WriteCollectionOfPrimitiveValues<string>("legalNames", LegalNames);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("profileUrl", ProfileUrl);
            writer.WriteStringValue("stage", Stage);
            writer.WriteStringValue("status", Status);
            writer.WriteIntValue("statusId", StatusId);
            writer.WriteStringValue("url", Url);
            writer.WriteBoolValue("vcBacked", VcBacked);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
