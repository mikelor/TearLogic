// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Firmographics
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Taxonomy : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The industry of this organization in the CB Insights industry taxonomy (mid-level)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Industry { get; set; }
#nullable restore
#else
        public string Industry { get; set; }
#endif
        /// <summary>The CBI ID of this industry; see https://api-docs.cbinsights.com/docs/reference/taxonomy/</summary>
        public int? IndustryId { get; set; }
        /// <summary>IDs for CB Insights markets the organization is a part of.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? MarketIds { get; set; }
#nullable restore
#else
        public List<int?> MarketIds { get; set; }
#endif
        /// <summary>CB Insights markets the organization is a part of.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MarketNames { get; set; }
#nullable restore
#else
        public List<string> MarketNames { get; set; }
#endif
        /// <summary>The sector of this organization in the CB Insights industry taxonomy (highest level).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sector { get; set; }
#nullable restore
#else
        public string Sector { get; set; }
#endif
        /// <summary>The CBI ID of this sector; see https://api-docs.cbinsights.com/docs/reference/taxonomy/</summary>
        public int? SectorId { get; set; }
        /// <summary>The sub-industry of this organization in the CB Insights industry taxonomy (lowest level).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subindustry { get; set; }
#nullable restore
#else
        public string Subindustry { get; set; }
#endif
        /// <summary>The CBI ID of this sub-industry; see https://api-docs.cbinsights.com/docs/reference/taxonomy/</summary>
        public int? SubindustryId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Firmographics.Taxonomy"/> and sets the default values.
        /// </summary>
        public Taxonomy()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Firmographics.Taxonomy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Firmographics.Taxonomy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Firmographics.Taxonomy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "industry", n => { Industry = n.GetStringValue(); } },
                { "industryId", n => { IndustryId = n.GetIntValue(); } },
                { "marketIds", n => { MarketIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "marketNames", n => { MarketNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "sector", n => { Sector = n.GetStringValue(); } },
                { "sectorId", n => { SectorId = n.GetIntValue(); } },
                { "subindustry", n => { Subindustry = n.GetStringValue(); } },
                { "subindustryId", n => { SubindustryId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("industry", Industry);
            writer.WriteIntValue("industryId", IndustryId);
            writer.WriteCollectionOfPrimitiveValues<int?>("marketIds", MarketIds);
            writer.WriteCollectionOfPrimitiveValues<string>("marketNames", MarketNames);
            writer.WriteStringValue("sector", Sector);
            writer.WriteIntValue("sectorId", SectorId);
            writer.WriteStringValue("subindustry", Subindustry);
            writer.WriteIntValue("subindustryId", SubindustryId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
