// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Firmographics
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Org : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Business models for the organization. Indicates what markets a business serves and how they create revenue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Firmographics.BusinessModel>? BusinessModels { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Firmographics.BusinessModel> BusinessModels { get; set; }
#endif
        /// <summary>Information about this organization&apos;s subsidiaries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Firmographics.BasicOrg>? ChildOrgs { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Firmographics.BasicOrg> ChildOrgs { get; set; }
#endif
        /// <summary>Competitors that CB Insights has determined are related to the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Firmographics.Competitor>? Competitors { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Firmographics.Competitor> Competitors { get; set; }
#endif
        /// <summary>CB Insights analyst-curated lists of companies that this company is a part of.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Firmographics.ExpertCollection>? ExpertCollections { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Firmographics.ExpertCollection> ExpertCollections { get; set; }
#endif
        /// <summary>The organization&apos;s financial information, such as revenue and valuation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Firmographics.Financials? Financials { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Firmographics.Financials Financials { get; set; }
#endif
        /// <summary>The current and historical headcount of this organization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Firmographics.Headcount? Headcount { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Firmographics.Headcount Headcount { get; set; }
#endif
        /// <summary>The organization&apos;s public identifiers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Firmographics.Identifiers? Identifiers { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Firmographics.Identifiers Identifiers { get; set; }
#endif
        /// <summary>CB Insights organization ID.</summary>
        public int? OrgId { get; set; }
        /// <summary>Information about parent organization(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Firmographics.BasicOrg>? ParentOrgs { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Firmographics.BasicOrg> ParentOrgs { get; set; }
#endif
        /// <summary>General information about the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Firmographics.Summary? Summary { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Firmographics.Summary Summary { get; set; }
#endif
        /// <summary>CB Insights custom taxonomy where sector is the top of the hierarchy, followed by industry, and then sub-industry. Not all organizations contain all taxonomy levels.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Firmographics.Taxonomy? Taxonomy { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Firmographics.Taxonomy Taxonomy { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Firmographics.Org"/> and sets the default values.
        /// </summary>
        public Org()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Firmographics.Org"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Firmographics.Org CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Firmographics.Org();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "businessModels", n => { BusinessModels = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.BusinessModel>(global::TearLogic.Clients.Models.V2Firmographics.BusinessModel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "childOrgs", n => { ChildOrgs = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.BasicOrg>(global::TearLogic.Clients.Models.V2Firmographics.BasicOrg.CreateFromDiscriminatorValue)?.AsList(); } },
                { "competitors", n => { Competitors = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.Competitor>(global::TearLogic.Clients.Models.V2Firmographics.Competitor.CreateFromDiscriminatorValue)?.AsList(); } },
                { "expertCollections", n => { ExpertCollections = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.ExpertCollection>(global::TearLogic.Clients.Models.V2Firmographics.ExpertCollection.CreateFromDiscriminatorValue)?.AsList(); } },
                { "financials", n => { Financials = n.GetObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Financials>(global::TearLogic.Clients.Models.V2Firmographics.Financials.CreateFromDiscriminatorValue); } },
                { "headcount", n => { Headcount = n.GetObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Headcount>(global::TearLogic.Clients.Models.V2Firmographics.Headcount.CreateFromDiscriminatorValue); } },
                { "identifiers", n => { Identifiers = n.GetObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Identifiers>(global::TearLogic.Clients.Models.V2Firmographics.Identifiers.CreateFromDiscriminatorValue); } },
                { "orgId", n => { OrgId = n.GetIntValue(); } },
                { "parentOrgs", n => { ParentOrgs = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.BasicOrg>(global::TearLogic.Clients.Models.V2Firmographics.BasicOrg.CreateFromDiscriminatorValue)?.AsList(); } },
                { "summary", n => { Summary = n.GetObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Summary>(global::TearLogic.Clients.Models.V2Firmographics.Summary.CreateFromDiscriminatorValue); } },
                { "taxonomy", n => { Taxonomy = n.GetObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Taxonomy>(global::TearLogic.Clients.Models.V2Firmographics.Taxonomy.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.BusinessModel>("businessModels", BusinessModels);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.BasicOrg>("childOrgs", ChildOrgs);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.Competitor>("competitors", Competitors);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.ExpertCollection>("expertCollections", ExpertCollections);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Financials>("financials", Financials);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Headcount>("headcount", Headcount);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Identifiers>("identifiers", Identifiers);
            writer.WriteIntValue("orgId", OrgId);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.BasicOrg>("parentOrgs", ParentOrgs);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Summary>("summary", Summary);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Taxonomy>("taxonomy", Taxonomy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
