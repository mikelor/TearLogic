// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Firmographics
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Address : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The name of the city in which the organization is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>The CBI city ID of the city in which the organization is located; see https://api-docs.cbinsights.com/docs/reference/address/</summary>
        public int? CityId { get; set; }
        /// <summary>The name of the continent in which the organization is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Continent { get; set; }
#nullable restore
#else
        public string Continent { get; set; }
#endif
        /// <summary>CBI continent ID of the continent in which the organization is located; see https://api-docs.cbinsights.com/docs/reference/address/</summary>
        public int? ContinentId { get; set; }
        /// <summary>The name of the country in which the organization is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The CBI country ID of the country in which the organization is located; see https://api-docs.cbinsights.com/docs/reference/address/</summary>
        public int? CountryId { get; set; }
        /// <summary>The postal code of the organization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostalCode { get; set; }
#nullable restore
#else
        public string PostalCode { get; set; }
#endif
        /// <summary>The organization&apos;s geographical region, if applicable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Firmographics.Region>? Regions { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Firmographics.Region> Regions { get; set; }
#endif
        /// <summary>The name of the state or province in which the organization is located; also includes the constituent countries of the UK.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateProvince { get; set; }
#nullable restore
#else
        public string StateProvince { get; set; }
#endif
        /// <summary>The CBI state/province ID of the state/province in which the organization is located; see https://api-docs.cbinsights.com/docs/reference/address/</summary>
        public int? StateProvinceId { get; set; }
        /// <summary>The street address of the organization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StreetAddress { get; set; }
#nullable restore
#else
        public string StreetAddress { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Firmographics.Address"/> and sets the default values.
        /// </summary>
        public Address()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Firmographics.Address"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Firmographics.Address CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Firmographics.Address();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "city", n => { City = n.GetStringValue(); } },
                { "cityId", n => { CityId = n.GetIntValue(); } },
                { "continent", n => { Continent = n.GetStringValue(); } },
                { "continentId", n => { ContinentId = n.GetIntValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "countryId", n => { CountryId = n.GetIntValue(); } },
                { "postalCode", n => { PostalCode = n.GetStringValue(); } },
                { "regions", n => { Regions = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.Region>(global::TearLogic.Clients.Models.V2Firmographics.Region.CreateFromDiscriminatorValue)?.AsList(); } },
                { "stateProvince", n => { StateProvince = n.GetStringValue(); } },
                { "stateProvinceId", n => { StateProvinceId = n.GetIntValue(); } },
                { "streetAddress", n => { StreetAddress = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("city", City);
            writer.WriteIntValue("cityId", CityId);
            writer.WriteStringValue("continent", Continent);
            writer.WriteIntValue("continentId", ContinentId);
            writer.WriteStringValue("country", Country);
            writer.WriteIntValue("countryId", CountryId);
            writer.WriteStringValue("postalCode", PostalCode);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Firmographics.Region>("regions", Regions);
            writer.WriteStringValue("stateProvince", StateProvince);
            writer.WriteIntValue("stateProvinceId", StateProvinceId);
            writer.WriteStringValue("streetAddress", StreetAddress);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
