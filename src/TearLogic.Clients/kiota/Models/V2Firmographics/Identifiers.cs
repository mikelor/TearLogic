// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Firmographics
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Identifiers : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>SEC Central Index Keys.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Ciks { get; set; }
#nullable restore
#else
        public List<string> Ciks { get; set; }
#endif
        /// <summary>Committee on Uniform Security Identification Procedures (North American security identifiers).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Cusips { get; set; }
#nullable restore
#else
        public List<string> Cusips { get; set; }
#endif
        /// <summary>Financial Instrument Global Identifiers (also known as OpenFIGI).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Figis { get; set; }
#nullable restore
#else
        public List<string> Figis { get; set; }
#endif
        /// <summary>International Securities Identification Numbers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Isins { get; set; }
#nullable restore
#else
        public List<string> Isins { get; set; }
#endif
        /// <summary>Legal Entity Identifiers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Leis { get; set; }
#nullable restore
#else
        public List<string> Leis { get; set; }
#endif
        /// <summary>Stock tickers associated with this organization, not including the exchange associated with each ticker.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tickers { get; set; }
#nullable restore
#else
        public List<string> Tickers { get; set; }
#endif
        /// <summary>Stock tickers associated with this organization, including the exchange of each ticker, separated by a colon.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TickersWithExchanges { get; set; }
#nullable restore
#else
        public List<string> TickersWithExchanges { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Firmographics.Identifiers"/> and sets the default values.
        /// </summary>
        public Identifiers()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Firmographics.Identifiers"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Firmographics.Identifiers CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Firmographics.Identifiers();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ciks", n => { Ciks = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "cusips", n => { Cusips = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "figis", n => { Figis = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "isins", n => { Isins = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "leis", n => { Leis = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tickers", n => { Tickers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tickersWithExchanges", n => { TickersWithExchanges = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("ciks", Ciks);
            writer.WriteCollectionOfPrimitiveValues<string>("cusips", Cusips);
            writer.WriteCollectionOfPrimitiveValues<string>("figis", Figis);
            writer.WriteCollectionOfPrimitiveValues<string>("isins", Isins);
            writer.WriteCollectionOfPrimitiveValues<string>("leis", Leis);
            writer.WriteCollectionOfPrimitiveValues<string>("tickers", Tickers);
            writer.WriteCollectionOfPrimitiveValues<string>("tickersWithExchanges", TickersWithExchanges);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
