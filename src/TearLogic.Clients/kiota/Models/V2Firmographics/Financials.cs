// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Firmographics
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Financials : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date of the most recent funding round, in the format YYYY-MM-DD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastFundingDate { get; set; }
#nullable restore
#else
        public string LastFundingDate { get; set; }
#endif
        /// <summary>The latest maximum known revenue multiple.</summary>
        public double? LatestRevenueMultipleMax { get; set; }
        /// <summary>The latest minimum known revenue multiple.</summary>
        public double? LatestRevenueMultipleMin { get; set; }
        /// <summary>For public companies, the market capitalization of the organization in millions of US dollars.</summary>
        public double? MarketCap { get; set; }
        /// <summary>The date of the most recent revenue data, in the format YYYY-MM-DD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RevenueDate { get; set; }
#nullable restore
#else
        public string RevenueDate { get; set; }
#endif
        /// <summary>The latest maximum known revenue in US dollars.</summary>
        public double? RevenueMax { get; set; }
        /// <summary>The latest minimum known revenue in US dollars. For most organizations, revenueMin is equal to revenueMax.</summary>
        public double? RevenueMin { get; set; }
        /// <summary>For public companies, the price, in US dollars, at which it traded at the end of the previous regular trading session.</summary>
        public double? StockLastClose { get; set; }
        /// <summary>Total equity funding, in millions of US dollars. This only includes rounds where equity is exchanged.</summary>
        public double? TotalEquityFunding { get; set; }
        /// <summary>Total funding of any type raised by this organization, in millions of US dollars. This includes Grant, Accelerator, Debt, and other non-equity rounds.</summary>
        public double? TotalFunding { get; set; }
        /// <summary>Latest valuation on record in millions of US dollars.</summary>
        public double? Valuation { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Firmographics.Financials"/> and sets the default values.
        /// </summary>
        public Financials()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Firmographics.Financials"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Firmographics.Financials CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Firmographics.Financials();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "lastFundingDate", n => { LastFundingDate = n.GetStringValue(); } },
                { "latestRevenueMultipleMax", n => { LatestRevenueMultipleMax = n.GetDoubleValue(); } },
                { "latestRevenueMultipleMin", n => { LatestRevenueMultipleMin = n.GetDoubleValue(); } },
                { "marketCap", n => { MarketCap = n.GetDoubleValue(); } },
                { "revenueDate", n => { RevenueDate = n.GetStringValue(); } },
                { "revenueMax", n => { RevenueMax = n.GetDoubleValue(); } },
                { "revenueMin", n => { RevenueMin = n.GetDoubleValue(); } },
                { "stockLastClose", n => { StockLastClose = n.GetDoubleValue(); } },
                { "totalEquityFunding", n => { TotalEquityFunding = n.GetDoubleValue(); } },
                { "totalFunding", n => { TotalFunding = n.GetDoubleValue(); } },
                { "valuation", n => { Valuation = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("lastFundingDate", LastFundingDate);
            writer.WriteDoubleValue("latestRevenueMultipleMax", LatestRevenueMultipleMax);
            writer.WriteDoubleValue("latestRevenueMultipleMin", LatestRevenueMultipleMin);
            writer.WriteDoubleValue("marketCap", MarketCap);
            writer.WriteStringValue("revenueDate", RevenueDate);
            writer.WriteDoubleValue("revenueMax", RevenueMax);
            writer.WriteDoubleValue("revenueMin", RevenueMin);
            writer.WriteDoubleValue("stockLastClose", StockLastClose);
            writer.WriteDoubleValue("totalEquityFunding", TotalEquityFunding);
            writer.WriteDoubleValue("totalFunding", TotalFunding);
            writer.WriteDoubleValue("valuation", Valuation);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
