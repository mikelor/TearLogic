// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Firmographics
{
    /// <summary>
    /// Search parameters to request a list of organization profiles. You must pass at least one search parameter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FirmographicsRequestBody : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>SEC Central Index Keys of organizations to match.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Ciks { get; set; }
#nullable restore
#else
        public List<string> Ciks { get; set; }
#endif
        /// <summary>CBI city IDs to match; see https://api-docs.cbinsights.com/docs/reference/address/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? CityIds { get; set; }
#nullable restore
#else
        public List<int?> CityIds { get; set; }
#endif
        /// <summary>Searches for organizations within these Expert Collections.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? CollectionIds { get; set; }
#nullable restore
#else
        public List<int?> CollectionIds { get; set; }
#endif
        /// <summary>CBI continent IDs to match; see https://api-docs.cbinsights.com/docs/reference/address/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ContinentIds { get; set; }
#nullable restore
#else
        public List<int?> ContinentIds { get; set; }
#endif
        /// <summary>CBI country IDs to match; see https://api-docs.cbinsights.com/docs/reference/address/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? CountryIds { get; set; }
#nullable restore
#else
        public List<int?> CountryIds { get; set; }
#endif
        /// <summary>CUSIPs (Committee on Uniform Security Identification Procedures - North American security identifiers) to match.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Cusips { get; set; }
#nullable restore
#else
        public List<string> Cusips { get; set; }
#endif
        /// <summary>Financial Instrument Global Identifiers (also known as OpenFIGI) to match.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Figis { get; set; }
#nullable restore
#else
        public List<string> Figis { get; set; }
#endif
        /// <summary>Searches for organizations which have been invested in by these investor types; see https://api-docs.cbinsights.com/docs/reference/investor_type/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? FundingInvestorTypeIds { get; set; }
#nullable restore
#else
        public List<int?> FundingInvestorTypeIds { get; set; }
#endif
        /// <summary>CBI industry IDs to match; see https://api-docs.cbinsights.com/docs/reference/taxonomy/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? IndustryIds { get; set; }
#nullable restore
#else
        public List<int?> IndustryIds { get; set; }
#endif
        /// <summary>Searches for organizations which have been invested in by these investors.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? InvestorOrgIds { get; set; }
#nullable restore
#else
        public List<int?> InvestorOrgIds { get; set; }
#endif
        /// <summary>Searches for investor organizations with these investor types; see https://api-docs.cbinsights.com/docs/reference/investor_type/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? InvestorTypeIds { get; set; }
#nullable restore
#else
        public List<int?> InvestorTypeIds { get; set; }
#endif
        /// <summary>International Securities Identification Numbers to match.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Isins { get; set; }
#nullable restore
#else
        public List<string> Isins { get; set; }
#endif
        /// <summary>Analogous to keyword search on the CB Insights platform. Search term to match against organization names, descriptions, and aliases.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Keyword { get; set; }
#nullable restore
#else
        public string Keyword { get; set; }
#endif
        /// <summary>CBI funding round category IDs of organizations to search for. For a more granular filter, the &quot;lastFundingRoundIds&quot; filter can be used instead; see https://api-docs.cbinsights.com/docs/reference/funding_types/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? LastFundingRoundCategoryIds { get; set; }
#nullable restore
#else
        public List<int?> LastFundingRoundCategoryIds { get; set; }
#endif
        /// <summary>CBI funding round IDs of organizations. This property is used for granular filtering of the stage that most recently occurred. For detailed mapping of Funding Round IDs to investment Stages, see: https://api-docs.cbinsights.com/docs/reference/funding_types/#funding-round</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? LastFundingRoundIds { get; set; }
#nullable restore
#else
        public List<int?> LastFundingRoundIds { get; set; }
#endif
        /// <summary>Legal Entity Identifiers to match.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Leis { get; set; }
#nullable restore
#else
        public List<string> Leis { get; set; }
#endif
        /// <summary>The maximum number of organizations to be returned in a single response.</summary>
        public int? Limit { get; set; }
        /// <summary>Searches for organizations that are a part of these CB Insights markets.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? MarketIds { get; set; }
#nullable restore
#else
        public List<int?> MarketIds { get; set; }
#endif
        /// <summary>Searches for organizations that are a part of these CB Insights markets. Supports partial matches, i.e., &quot;AI&quot; will return organizations in markets that include &quot;AI&quot; in their names.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MarketNames { get; set; }
#nullable restore
#else
        public List<string> MarketNames { get; set; }
#endif
        /// <summary>Filters for organizations with a headcount less than or equal to this value</summary>
        public int? MaxCurrentHeadcount { get; set; }
        /// <summary>Filters for organizations which have received funding on or before the provided date, in the format YYYY-MM-DD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaxLastFundingDate { get; set; }
#nullable restore
#else
        public string MaxLastFundingDate { get; set; }
#endif
        /// <summary>Filters for organizations which have received a total amount of funding less than or equal to this value, in millions of US dollars.</summary>
        public double? MaxTotalFundingInMillions { get; set; }
        /// <summary>Filters for organizations with a valuation less than or equal to this value, in millions of US dollars.</summary>
        public double? MaxValuationInMillions { get; set; }
        /// <summary>Filters for organizations with a headcount greater than or equal to this value</summary>
        public int? MinCurrentHeadcount { get; set; }
        /// <summary>Filters for organizations which have received funding on or after the provided date, in the format YYYY-MM-DD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinLastFundingDate { get; set; }
#nullable restore
#else
        public string MinLastFundingDate { get; set; }
#endif
        /// <summary>Filters for organizations which have received a total amount of funding greater than or equal to this value, in millions of US dollars.</summary>
        public double? MinTotalFundingInMillions { get; set; }
        /// <summary>Filters for organizations with a valuation greater than or equal to this value, in millions of US dollars.</summary>
        public double? MinValuationInMillions { get; set; }
        /// <summary>Token to fetch the next page of results; provided in a previous response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextPageToken { get; set; }
#nullable restore
#else
        public string NextPageToken { get; set; }
#endif
        /// <summary>CB Insights organization IDs to return.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? OrgIds { get; set; }
#nullable restore
#else
        public List<int?> OrgIds { get; set; }
#endif
        /// <summary>Organization names to exactly match.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OrgNames { get; set; }
#nullable restore
#else
        public List<string> OrgNames { get; set; }
#endif
        /// <summary>CBI organization status IDs to match; see https://api-docs.cbinsights.com/docs/reference/org_status/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? OrgStatusIds { get; set; }
#nullable restore
#else
        public List<int?> OrgStatusIds { get; set; }
#endif
        /// <summary>CBI region IDs to match; see https://api-docs.cbinsights.com/docs/reference/address/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? RegionIds { get; set; }
#nullable restore
#else
        public List<int?> RegionIds { get; set; }
#endif
        /// <summary>CBI sector IDs to match; see https://api-docs.cbinsights.com/docs/reference/taxonomy/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? SectorIds { get; set; }
#nullable restore
#else
        public List<int?> SectorIds { get; set; }
#endif
        /// <summary>The order in which the results will be returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Firmographics.FirmographicsRequestBody_sort? Sort { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Firmographics.FirmographicsRequestBody_sort Sort { get; set; }
#endif
        /// <summary>CBI state/province IDs to match; see https://api-docs.cbinsights.com/docs/reference/address/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? StateProvinceIds { get; set; }
#nullable restore
#else
        public List<int?> StateProvinceIds { get; set; }
#endif
        /// <summary>CBI sub-industry IDs to match; see https://api-docs.cbinsights.com/docs/reference/taxonomy/</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? SubindustryIds { get; set; }
#nullable restore
#else
        public List<int?> SubindustryIds { get; set; }
#endif
        /// <summary>Stock tickers to match. Each may optionally include a stock exchange code, separated from the ticker by a colon; see https://api-docs.cbinsights.com/docs/reference/stock_exchanges/ for exchange codes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tickers { get; set; }
#nullable restore
#else
        public List<string> Tickers { get; set; }
#endif
        /// <summary>Websites of organizations to search for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Urls { get; set; }
#nullable restore
#else
        public List<string> Urls { get; set; }
#endif
        /// <summary>Boolean flag to match organizations that have received venture funding.</summary>
        public bool? VcBacked { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Firmographics.FirmographicsRequestBody"/> and sets the default values.
        /// </summary>
        public FirmographicsRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Firmographics.FirmographicsRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Firmographics.FirmographicsRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Firmographics.FirmographicsRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ciks", n => { Ciks = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "cityIds", n => { CityIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "collectionIds", n => { CollectionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "continentIds", n => { ContinentIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "countryIds", n => { CountryIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "cusips", n => { Cusips = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "figis", n => { Figis = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "fundingInvestorTypeIds", n => { FundingInvestorTypeIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "industryIds", n => { IndustryIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "investorOrgIds", n => { InvestorOrgIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "investorTypeIds", n => { InvestorTypeIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "isins", n => { Isins = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "keyword", n => { Keyword = n.GetStringValue(); } },
                { "lastFundingRoundCategoryIds", n => { LastFundingRoundCategoryIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "lastFundingRoundIds", n => { LastFundingRoundIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "leis", n => { Leis = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "limit", n => { Limit = n.GetIntValue(); } },
                { "marketIds", n => { MarketIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "marketNames", n => { MarketNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "maxCurrentHeadcount", n => { MaxCurrentHeadcount = n.GetIntValue(); } },
                { "maxLastFundingDate", n => { MaxLastFundingDate = n.GetStringValue(); } },
                { "maxTotalFundingInMillions", n => { MaxTotalFundingInMillions = n.GetDoubleValue(); } },
                { "maxValuationInMillions", n => { MaxValuationInMillions = n.GetDoubleValue(); } },
                { "minCurrentHeadcount", n => { MinCurrentHeadcount = n.GetIntValue(); } },
                { "minLastFundingDate", n => { MinLastFundingDate = n.GetStringValue(); } },
                { "minTotalFundingInMillions", n => { MinTotalFundingInMillions = n.GetDoubleValue(); } },
                { "minValuationInMillions", n => { MinValuationInMillions = n.GetDoubleValue(); } },
                { "nextPageToken", n => { NextPageToken = n.GetStringValue(); } },
                { "orgIds", n => { OrgIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "orgNames", n => { OrgNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "orgStatusIds", n => { OrgStatusIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "regionIds", n => { RegionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "sectorIds", n => { SectorIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "sort", n => { Sort = n.GetObjectValue<global::TearLogic.Clients.Models.V2Firmographics.FirmographicsRequestBody_sort>(global::TearLogic.Clients.Models.V2Firmographics.FirmographicsRequestBody_sort.CreateFromDiscriminatorValue); } },
                { "stateProvinceIds", n => { StateProvinceIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "subindustryIds", n => { SubindustryIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "tickers", n => { Tickers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "urls", n => { Urls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "vcBacked", n => { VcBacked = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("ciks", Ciks);
            writer.WriteCollectionOfPrimitiveValues<int?>("cityIds", CityIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("collectionIds", CollectionIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("continentIds", ContinentIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("countryIds", CountryIds);
            writer.WriteCollectionOfPrimitiveValues<string>("cusips", Cusips);
            writer.WriteCollectionOfPrimitiveValues<string>("figis", Figis);
            writer.WriteCollectionOfPrimitiveValues<int?>("fundingInvestorTypeIds", FundingInvestorTypeIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("industryIds", IndustryIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("investorOrgIds", InvestorOrgIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("investorTypeIds", InvestorTypeIds);
            writer.WriteCollectionOfPrimitiveValues<string>("isins", Isins);
            writer.WriteStringValue("keyword", Keyword);
            writer.WriteCollectionOfPrimitiveValues<int?>("lastFundingRoundCategoryIds", LastFundingRoundCategoryIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("lastFundingRoundIds", LastFundingRoundIds);
            writer.WriteCollectionOfPrimitiveValues<string>("leis", Leis);
            writer.WriteIntValue("limit", Limit);
            writer.WriteCollectionOfPrimitiveValues<int?>("marketIds", MarketIds);
            writer.WriteCollectionOfPrimitiveValues<string>("marketNames", MarketNames);
            writer.WriteIntValue("maxCurrentHeadcount", MaxCurrentHeadcount);
            writer.WriteStringValue("maxLastFundingDate", MaxLastFundingDate);
            writer.WriteDoubleValue("maxTotalFundingInMillions", MaxTotalFundingInMillions);
            writer.WriteDoubleValue("maxValuationInMillions", MaxValuationInMillions);
            writer.WriteIntValue("minCurrentHeadcount", MinCurrentHeadcount);
            writer.WriteStringValue("minLastFundingDate", MinLastFundingDate);
            writer.WriteDoubleValue("minTotalFundingInMillions", MinTotalFundingInMillions);
            writer.WriteDoubleValue("minValuationInMillions", MinValuationInMillions);
            writer.WriteStringValue("nextPageToken", NextPageToken);
            writer.WriteCollectionOfPrimitiveValues<int?>("orgIds", OrgIds);
            writer.WriteCollectionOfPrimitiveValues<string>("orgNames", OrgNames);
            writer.WriteCollectionOfPrimitiveValues<int?>("orgStatusIds", OrgStatusIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("regionIds", RegionIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("sectorIds", SectorIds);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Firmographics.FirmographicsRequestBody_sort>("sort", Sort);
            writer.WriteCollectionOfPrimitiveValues<int?>("stateProvinceIds", StateProvinceIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("subindustryIds", SubindustryIds);
            writer.WriteCollectionOfPrimitiveValues<string>("tickers", Tickers);
            writer.WriteCollectionOfPrimitiveValues<string>("urls", Urls);
            writer.WriteBoolValue("vcBacked", VcBacked);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
