// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
using TearLogic.Clients.Models.V2Firmographics;
using TearLogic.Clients.Models.V2Outlook;
namespace TearLogic.Clients.Models.V2ScoutingReports
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OrgInfo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The organization&apos;s geographical location.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Firmographics.Address? Address { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Firmographics.Address Address { get; set; }
#endif
        /// <summary>The organization&apos;s current Commercial Maturity score.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.MaturityLevel? CommercialMaturity { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.MaturityLevel CommercialMaturity { get; set; }
#endif
        /// <summary>A description regarding who they are and what they do.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The year the organization was founded.</summary>
        public int? FoundedYear { get; set; }
        /// <summary>The current headcount of this organization.</summary>
        public int? Headcount { get; set; }
        /// <summary>CB Insights organization ID.</summary>
        public int? Id { get; set; }
        /// <summary>The date of the most recent funding round, in the format YYYY-MM-DD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastFundingDate { get; set; }
#nullable restore
#else
        public string LastFundingDate { get; set; }
#endif
        /// <summary>The organization&apos;s name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The organization&apos;s current overall Mosaic score.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore? OverallMosaicScore { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore OverallMosaicScore { get; set; }
#endif
        /// <summary>The type of investment stage that most recently occurred.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Stage { get; set; }
#nullable restore
#else
        public string Stage { get; set; }
#endif
        /// <summary>Total funding of any type raised by this organization, in millions of US dollars. This includes Grant, Accelerator, Debt, and other non-equity rounds.</summary>
        public double? TotalFunding { get; set; }
        /// <summary>The organization&apos;s website.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2ScoutingReports.OrgInfo"/> and sets the default values.
        /// </summary>
        public OrgInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2ScoutingReports.OrgInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2ScoutingReports.OrgInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2ScoutingReports.OrgInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address", n => { Address = n.GetObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Address>(global::TearLogic.Clients.Models.V2Firmographics.Address.CreateFromDiscriminatorValue); } },
                { "commercialMaturity", n => { CommercialMaturity = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.MaturityLevel>(global::TearLogic.Clients.Models.V2Outlook.MaturityLevel.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "foundedYear", n => { FoundedYear = n.GetIntValue(); } },
                { "headcount", n => { Headcount = n.GetIntValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "lastFundingDate", n => { LastFundingDate = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "overallMosaicScore", n => { OverallMosaicScore = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore.CreateFromDiscriminatorValue); } },
                { "stage", n => { Stage = n.GetStringValue(); } },
                { "totalFunding", n => { TotalFunding = n.GetDoubleValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Firmographics.Address>("address", Address);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.MaturityLevel>("commercialMaturity", CommercialMaturity);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("foundedYear", FoundedYear);
            writer.WriteIntValue("headcount", Headcount);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("lastFundingDate", LastFundingDate);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>("overallMosaicScore", OverallMosaicScore);
            writer.WriteStringValue("stage", Stage);
            writer.WriteDoubleValue("totalFunding", TotalFunding);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
