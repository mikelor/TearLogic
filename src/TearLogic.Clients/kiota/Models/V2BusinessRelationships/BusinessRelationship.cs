// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2BusinessRelationships
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BusinessRelationship : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>CB Insights proprietary generated insights about this relationship.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2BusinessRelationships.Insights? Insights { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2BusinessRelationships.Insights Insights { get; set; }
#endif
        /// <summary>The lastUpdateTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastUpdateTime { get; set; }
#nullable restore
#else
        public string LastUpdateTime { get; set; }
#endif
        /// <summary>A news snippet about this business relationship.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2BusinessRelationships.NewsSnippet? NewsSnippet { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2BusinessRelationships.NewsSnippet NewsSnippet { get; set; }
#endif
        /// <summary>A list of business partners involved.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2BusinessRelationships.Partner>? Partners { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2BusinessRelationships.Partner> Partners { get; set; }
#endif
        /// <summary>A unique ID which identifies this relationship.</summary>
        public int? RelationshipId { get; set; }
        /// <summary>A list of sources of information about this business relationship.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2BusinessRelationships.Source>? Sources { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2BusinessRelationships.Source> Sources { get; set; }
#endif
        /// <summary>The date when this business relationship began (YYYY-MM-DD).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2BusinessRelationships.BusinessRelationship"/> and sets the default values.
        /// </summary>
        public BusinessRelationship()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2BusinessRelationships.BusinessRelationship"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2BusinessRelationships.BusinessRelationship CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2BusinessRelationships.BusinessRelationship();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "insights", n => { Insights = n.GetObjectValue<global::TearLogic.Clients.Models.V2BusinessRelationships.Insights>(global::TearLogic.Clients.Models.V2BusinessRelationships.Insights.CreateFromDiscriminatorValue); } },
                { "lastUpdateTime", n => { LastUpdateTime = n.GetStringValue(); } },
                { "newsSnippet", n => { NewsSnippet = n.GetObjectValue<global::TearLogic.Clients.Models.V2BusinessRelationships.NewsSnippet>(global::TearLogic.Clients.Models.V2BusinessRelationships.NewsSnippet.CreateFromDiscriminatorValue); } },
                { "partners", n => { Partners = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2BusinessRelationships.Partner>(global::TearLogic.Clients.Models.V2BusinessRelationships.Partner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "relationshipId", n => { RelationshipId = n.GetIntValue(); } },
                { "sources", n => { Sources = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2BusinessRelationships.Source>(global::TearLogic.Clients.Models.V2BusinessRelationships.Source.CreateFromDiscriminatorValue)?.AsList(); } },
                { "startDate", n => { StartDate = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2BusinessRelationships.Insights>("insights", Insights);
            writer.WriteStringValue("lastUpdateTime", LastUpdateTime);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2BusinessRelationships.NewsSnippet>("newsSnippet", NewsSnippet);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2BusinessRelationships.Partner>("partners", Partners);
            writer.WriteIntValue("relationshipId", RelationshipId);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2BusinessRelationships.Source>("sources", Sources);
            writer.WriteStringValue("startDate", StartDate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
