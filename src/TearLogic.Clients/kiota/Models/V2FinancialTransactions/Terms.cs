// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2FinancialTransactions
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Terms : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Anti-dilution provision for the shares issued in this funding round. This can be null if the anti-dilution provision is not available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AntiDilutionProvision { get; set; }
#nullable restore
#else
        public string AntiDilutionProvision { get; set; }
#endif
        /// <summary>Unique identifier for the anti-dilution provision. This can be null if the anti-dilution provision is not available.</summary>
        public int? AntiDilutionProvisionId { get; set; }
        /// <summary>Dividend preference for the shares issued in this funding round. This can be null if the dividend preference is not available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DividendPreference { get; set; }
#nullable restore
#else
        public string DividendPreference { get; set; }
#endif
        /// <summary>Unique identifier for the dividend preference. This can be null if the dividend preference is not available.</summary>
        public int? DividendPreferenceId { get; set; }
        /// <summary>Indicates if the shares issued in this funding round have board voting rights. This can be null if information about board voting rights are not available.</summary>
        public bool? HasBoardVotingRights { get; set; }
        /// <summary>Indicates if the shares issued in this funding round have general voting rights. This can be null if information about general voting rights are not available.</summary>
        public bool? HasGeneralVotingRights { get; set; }
        /// <summary>Liquidation preference for the shares issued in this funding round. This can be null if the liquidation preference is not available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LiquidationPreference { get; set; }
#nullable restore
#else
        public string LiquidationPreference { get; set; }
#endif
        /// <summary>Unique identifier for the liquidation preference. This can be null if the liquidation preference is not available.</summary>
        public int? LiquidationPreferenceId { get; set; }
        /// <summary>Participation rights for the shares issued in this funding round. This can be null if the participation rights are not available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParticipationRights { get; set; }
#nullable restore
#else
        public string ParticipationRights { get; set; }
#endif
        /// <summary>Unique identifier for the participation rights. This can be null if the participation rights are not available.</summary>
        public int? ParticipationRightsId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2FinancialTransactions.Terms"/> and sets the default values.
        /// </summary>
        public Terms()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2FinancialTransactions.Terms"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2FinancialTransactions.Terms CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2FinancialTransactions.Terms();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "antiDilutionProvision", n => { AntiDilutionProvision = n.GetStringValue(); } },
                { "antiDilutionProvisionId", n => { AntiDilutionProvisionId = n.GetIntValue(); } },
                { "dividendPreference", n => { DividendPreference = n.GetStringValue(); } },
                { "dividendPreferenceId", n => { DividendPreferenceId = n.GetIntValue(); } },
                { "hasBoardVotingRights", n => { HasBoardVotingRights = n.GetBoolValue(); } },
                { "hasGeneralVotingRights", n => { HasGeneralVotingRights = n.GetBoolValue(); } },
                { "liquidationPreference", n => { LiquidationPreference = n.GetStringValue(); } },
                { "liquidationPreferenceId", n => { LiquidationPreferenceId = n.GetIntValue(); } },
                { "participationRights", n => { ParticipationRights = n.GetStringValue(); } },
                { "participationRightsId", n => { ParticipationRightsId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("antiDilutionProvision", AntiDilutionProvision);
            writer.WriteIntValue("antiDilutionProvisionId", AntiDilutionProvisionId);
            writer.WriteStringValue("dividendPreference", DividendPreference);
            writer.WriteIntValue("dividendPreferenceId", DividendPreferenceId);
            writer.WriteBoolValue("hasBoardVotingRights", HasBoardVotingRights);
            writer.WriteBoolValue("hasGeneralVotingRights", HasGeneralVotingRights);
            writer.WriteStringValue("liquidationPreference", LiquidationPreference);
            writer.WriteIntValue("liquidationPreferenceId", LiquidationPreferenceId);
            writer.WriteStringValue("participationRights", ParticipationRights);
            writer.WriteIntValue("participationRightsId", ParticipationRightsId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
