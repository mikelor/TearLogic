// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2FinancialTransactions
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CapTable : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date of the latest COI filing. This can be null if the date is not available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CoiFilingDate { get; set; }
#nullable restore
#else
        public string CoiFilingDate { get; set; }
#endif
        /// <summary>Price at which shares can be converted into another security or equity. This can be null if the conversion price is not available.</summary>
        public double? ConversionPrice { get; set; }
        /// <summary>The unique deal ID for this transaction. This can be null if the deal ID is not available.</summary>
        public int? DealId { get; set; }
        /// <summary>Dividend rate expressed as a percentage of the par value of the shares. This can be null if the dividend rate is not available.</summary>
        public double? DividendRate { get; set; }
        /// <summary>Original issue price per share at the time of issuance. This can be null if the issuance price is not available.</summary>
        public double? IssuancePrice { get; set; }
        /// <summary>Multiple of the original investment amount that investors can expect to receive upon liquidation. This can be null if the liquidation multiple is not available.</summary>
        public double? LiquidationMultiple { get; set; }
        /// <summary>Price at which shares can be sold back to the company or liquidated. This can be null if the liquidation price is not available.</summary>
        public double? LiquidationPrice { get; set; }
        /// <summary>Par value of the shares. This can be null if the par value is not available.</summary>
        public double? ParValue { get; set; }
        /// <summary>Percentage of total shares owned by investor(s) in this funding round. This can be null if the percentage owned is not available.</summary>
        public double? PercentageOwned { get; set; }
        /// <summary>Name of the funding round type as per the CoI filing. This can be null if the round type is not available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoundType { get; set; }
#nullable restore
#else
        public string RoundType { get; set; }
#endif
        /// <summary>ID of the funding round type. This can be null if the round type is not available.</summary>
        public int? RoundTypeId { get; set; }
        /// <summary>Number of shares authorized. This can be null if the number of shares is not available.</summary>
        public long? SharesAuthorized { get; set; }
        /// <summary>Additional terms governing the round. This can be null if the terms are not available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2FinancialTransactions.Terms? Terms { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2FinancialTransactions.Terms Terms { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2FinancialTransactions.CapTable"/> and sets the default values.
        /// </summary>
        public CapTable()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2FinancialTransactions.CapTable"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2FinancialTransactions.CapTable CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2FinancialTransactions.CapTable();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "coiFilingDate", n => { CoiFilingDate = n.GetStringValue(); } },
                { "conversionPrice", n => { ConversionPrice = n.GetDoubleValue(); } },
                { "dealId", n => { DealId = n.GetIntValue(); } },
                { "dividendRate", n => { DividendRate = n.GetDoubleValue(); } },
                { "issuancePrice", n => { IssuancePrice = n.GetDoubleValue(); } },
                { "liquidationMultiple", n => { LiquidationMultiple = n.GetDoubleValue(); } },
                { "liquidationPrice", n => { LiquidationPrice = n.GetDoubleValue(); } },
                { "parValue", n => { ParValue = n.GetDoubleValue(); } },
                { "percentageOwned", n => { PercentageOwned = n.GetDoubleValue(); } },
                { "roundType", n => { RoundType = n.GetStringValue(); } },
                { "roundTypeId", n => { RoundTypeId = n.GetIntValue(); } },
                { "sharesAuthorized", n => { SharesAuthorized = n.GetLongValue(); } },
                { "terms", n => { Terms = n.GetObjectValue<global::TearLogic.Clients.Models.V2FinancialTransactions.Terms>(global::TearLogic.Clients.Models.V2FinancialTransactions.Terms.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("coiFilingDate", CoiFilingDate);
            writer.WriteDoubleValue("conversionPrice", ConversionPrice);
            writer.WriteIntValue("dealId", DealId);
            writer.WriteDoubleValue("dividendRate", DividendRate);
            writer.WriteDoubleValue("issuancePrice", IssuancePrice);
            writer.WriteDoubleValue("liquidationMultiple", LiquidationMultiple);
            writer.WriteDoubleValue("liquidationPrice", LiquidationPrice);
            writer.WriteDoubleValue("parValue", ParValue);
            writer.WriteDoubleValue("percentageOwned", PercentageOwned);
            writer.WriteStringValue("roundType", RoundType);
            writer.WriteIntValue("roundTypeId", RoundTypeId);
            writer.WriteLongValue("sharesAuthorized", SharesAuthorized);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2FinancialTransactions.Terms>("terms", Terms);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
