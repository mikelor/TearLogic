// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2FinancialTransactions
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Transaction : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The value of the transaction, in millions of US dollars.</summary>
        public double? AmountInMillions { get; set; }
        /// <summary>The date when the financial transaction took place, in the format YYYY-MM-DD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>The unique deal ID for this transaction.</summary>
        public int? DealId { get; set; }
        /// <summary>CB Insights proprietary AI generated insights about the deal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2FinancialTransactions.Insights? Insights { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2FinancialTransactions.Insights Insights { get; set; }
#endif
        /// <summary>Organizations that participated in this transaction as investors.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2FinancialTransactions.Investor>? Investors { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2FinancialTransactions.Investor> Investors { get; set; }
#endif
        /// <summary>Whether this transaction is an exit. (IPO, acquisition, etc.)</summary>
        public bool? IsExit { get; set; }
        /// <summary>The organization that is receiving the funding.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2FinancialTransactions.BasicOrg? Recipient { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2FinancialTransactions.BasicOrg Recipient { get; set; }
#endif
        /// <summary>The maximum revenue of the funded organization at the time of this transaction, in US dollars. Typically, this value is equal to `revenueMin`.</summary>
        public double? RevenueMax { get; set; }
        /// <summary>The minimum revenue of the funded organization at the time of this transaction, in US dollars. Typically, this value is equal to `revenueMax`, but it may differ if the available data do not provide an exact number.</summary>
        public double? RevenueMin { get; set; }
        /// <summary>The maximum revenue multiple of the funded organization at the time of this transaction. Typically, this value is equal to `revenueMultipleMin`.</summary>
        public double? RevenueMultipleMax { get; set; }
        /// <summary>The minimum revenue multiple of the funded organization at the time of this transaction. Typically, this value is equal to `revenueMultipleMax`.</summary>
        public double? RevenueMultipleMin { get; set; }
        /// <summary>The time period to which the revenue and revenue multiple values pertain, typically a fiscal year or quarter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RevenueTimePeriod { get; set; }
#nullable restore
#else
        public string RevenueTimePeriod { get; set; }
#endif
        /// <summary>The name of the funding round type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Round { get; set; }
#nullable restore
#else
        public string Round { get; set; }
#endif
        /// <summary>See https://api-docs.cbinsights.com/docs/reference/funding_types/#funding-round-category</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoundCategory { get; set; }
#nullable restore
#else
        public string RoundCategory { get; set; }
#endif
        /// <summary>See https://api-docs.cbinsights.com/docs/reference/funding_types/#funding-round-category</summary>
        public int? RoundCategoryId { get; set; }
        /// <summary>The unique identifier of the funding round type. See https://api-docs.cbinsights.com/docs/reference/funding_types/</summary>
        public int? RoundId { get; set; }
        /// <summary>A simplified name of the funding round. For example, funding rounds &quot;Series A&quot; and &quot;Series A - II&quot; would both be represented as &quot;Series A&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SimplifiedRound { get; set; }
#nullable restore
#else
        public string SimplifiedRound { get; set; }
#endif
        /// <summary>A list of URLs to articles containing information about this financial transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Sources { get; set; }
#nullable restore
#else
        public List<string> Sources { get; set; }
#endif
        /// <summary>The valuation of the funded organization after this transaction, in millions of US dollars.</summary>
        public double? ValuationInMillions { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2FinancialTransactions.Transaction"/> and sets the default values.
        /// </summary>
        public Transaction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2FinancialTransactions.Transaction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2FinancialTransactions.Transaction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2FinancialTransactions.Transaction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amountInMillions", n => { AmountInMillions = n.GetDoubleValue(); } },
                { "date", n => { Date = n.GetStringValue(); } },
                { "dealId", n => { DealId = n.GetIntValue(); } },
                { "insights", n => { Insights = n.GetObjectValue<global::TearLogic.Clients.Models.V2FinancialTransactions.Insights>(global::TearLogic.Clients.Models.V2FinancialTransactions.Insights.CreateFromDiscriminatorValue); } },
                { "investors", n => { Investors = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2FinancialTransactions.Investor>(global::TearLogic.Clients.Models.V2FinancialTransactions.Investor.CreateFromDiscriminatorValue)?.AsList(); } },
                { "isExit", n => { IsExit = n.GetBoolValue(); } },
                { "recipient", n => { Recipient = n.GetObjectValue<global::TearLogic.Clients.Models.V2FinancialTransactions.BasicOrg>(global::TearLogic.Clients.Models.V2FinancialTransactions.BasicOrg.CreateFromDiscriminatorValue); } },
                { "revenueMax", n => { RevenueMax = n.GetDoubleValue(); } },
                { "revenueMin", n => { RevenueMin = n.GetDoubleValue(); } },
                { "revenueMultipleMax", n => { RevenueMultipleMax = n.GetDoubleValue(); } },
                { "revenueMultipleMin", n => { RevenueMultipleMin = n.GetDoubleValue(); } },
                { "revenueTimePeriod", n => { RevenueTimePeriod = n.GetStringValue(); } },
                { "round", n => { Round = n.GetStringValue(); } },
                { "roundCategory", n => { RoundCategory = n.GetStringValue(); } },
                { "roundCategoryId", n => { RoundCategoryId = n.GetIntValue(); } },
                { "roundId", n => { RoundId = n.GetIntValue(); } },
                { "simplifiedRound", n => { SimplifiedRound = n.GetStringValue(); } },
                { "sources", n => { Sources = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "valuationInMillions", n => { ValuationInMillions = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amountInMillions", AmountInMillions);
            writer.WriteStringValue("date", Date);
            writer.WriteIntValue("dealId", DealId);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2FinancialTransactions.Insights>("insights", Insights);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2FinancialTransactions.Investor>("investors", Investors);
            writer.WriteBoolValue("isExit", IsExit);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2FinancialTransactions.BasicOrg>("recipient", Recipient);
            writer.WriteDoubleValue("revenueMax", RevenueMax);
            writer.WriteDoubleValue("revenueMin", RevenueMin);
            writer.WriteDoubleValue("revenueMultipleMax", RevenueMultipleMax);
            writer.WriteDoubleValue("revenueMultipleMin", RevenueMultipleMin);
            writer.WriteStringValue("revenueTimePeriod", RevenueTimePeriod);
            writer.WriteStringValue("round", Round);
            writer.WriteStringValue("roundCategory", RoundCategory);
            writer.WriteIntValue("roundCategoryId", RoundCategoryId);
            writer.WriteIntValue("roundId", RoundId);
            writer.WriteStringValue("simplifiedRound", SimplifiedRound);
            writer.WriteCollectionOfPrimitiveValues<string>("sources", Sources);
            writer.WriteDoubleValue("valuationInMillions", ValuationInMillions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
