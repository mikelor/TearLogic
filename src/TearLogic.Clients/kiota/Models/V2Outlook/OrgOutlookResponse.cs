// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Outlook
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OrgOutlookResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>CB Insights proprietary metric to measures a private company&apos;s current ability to compete for customers or serve as a partner on a scale of 1-5.  This metric is available only for a subset of companies. More about this metric: https://support.cbinsights.com/hc/en-us/articles/25759259449485-About-Commercial-Maturity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.CommercialMaturity? CommercialMaturity { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.CommercialMaturity CommercialMaturity { get; set; }
#endif
        /// <summary>CB Insights Exit Probability is a proprietary machine learning algorithm that measures a private company’s chance of an IPO or M&amp;A exit within the next 2 years. More about this metric: https://support.cbinsights.com/hc/en-us/articles/29078253654413-About-Exit-Probability</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.CurrentExitProbability? ExitProbability { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.CurrentExitProbability ExitProbability { get; set; }
#endif
        /// <summary>CB Insights’ proprietary algorithm to indicate the company’s potential for success. All scores based on a scale between 0-1000. For more on our methodology and forecasting success, https://support.cbinsights.com/hc/en-us/articles/360042055171-About-Mosaic-Health</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.MosaicScore? MosaicScore { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.MosaicScore MosaicScore { get; set; }
#endif
        /// <summary>CB Insights organization ID.</summary>
        public int? OrgId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Outlook.OrgOutlookResponse"/> and sets the default values.
        /// </summary>
        public OrgOutlookResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Outlook.OrgOutlookResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Outlook.OrgOutlookResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Outlook.OrgOutlookResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "commercialMaturity", n => { CommercialMaturity = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.CommercialMaturity>(global::TearLogic.Clients.Models.V2Outlook.CommercialMaturity.CreateFromDiscriminatorValue); } },
                { "exitProbability", n => { ExitProbability = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentExitProbability>(global::TearLogic.Clients.Models.V2Outlook.CurrentExitProbability.CreateFromDiscriminatorValue); } },
                { "mosaicScore", n => { MosaicScore = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.MosaicScore>(global::TearLogic.Clients.Models.V2Outlook.MosaicScore.CreateFromDiscriminatorValue); } },
                { "orgId", n => { OrgId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.CommercialMaturity>("commercialMaturity", CommercialMaturity);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentExitProbability>("exitProbability", ExitProbability);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.MosaicScore>("mosaicScore", MosaicScore);
            writer.WriteIntValue("orgId", OrgId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
