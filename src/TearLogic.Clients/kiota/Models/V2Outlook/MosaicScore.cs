// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Outlook
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MosaicScore : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A Mosaic sub-score that measures the pedigree, education, and work experience of the leaders of the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore? Management { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore Management { get; set; }
#endif
        /// <summary>A Mosaic sub-score that measures the health of the industry in which the company is categorized.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore? Market { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore Market { get; set; }
#endif
        /// <summary>A Mosaic sub-score that measures the financial health of the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore? Momentum { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore Momentum { get; set; }
#endif
        /// <summary>A Mosaic sub-score that measures the traction of the company based on the company’s business signals, such as vendors, partners, social media, and news sentiment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore? Money { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore Money { get; set; }
#endif
        /// <summary>Overall Mosaic Score of the company. This is a composite score that measures the overall health of the company based on the company’s business signals, such as vendors, partners, social media, and news sentiment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore? Overall { get; set; }
#nullable restore
#else
        public global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore Overall { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Outlook.MosaicScore"/> and sets the default values.
        /// </summary>
        public MosaicScore()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Outlook.MosaicScore"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Outlook.MosaicScore CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Outlook.MosaicScore();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "management", n => { Management = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore.CreateFromDiscriminatorValue); } },
                { "market", n => { Market = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore.CreateFromDiscriminatorValue); } },
                { "momentum", n => { Momentum = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore.CreateFromDiscriminatorValue); } },
                { "money", n => { Money = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore.CreateFromDiscriminatorValue); } },
                { "overall", n => { Overall = n.GetObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>("management", Management);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>("market", Market);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>("momentum", Momentum);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>("money", Money);
            writer.WriteObjectValue<global::TearLogic.Clients.Models.V2Outlook.CurrentMosaicScore>("overall", Overall);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
