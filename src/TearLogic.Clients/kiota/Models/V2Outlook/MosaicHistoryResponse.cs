// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2Outlook
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MosaicHistoryResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The management property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>? Management { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore> Management { get; set; }
#endif
        /// <summary>The market property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>? Market { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore> Market { get; set; }
#endif
        /// <summary>The momentum property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>? Momentum { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore> Momentum { get; set; }
#endif
        /// <summary>The money property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>? Money { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore> Money { get; set; }
#endif
        /// <summary>The overall property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>? Overall { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore> Overall { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2Outlook.MosaicHistoryResponse"/> and sets the default values.
        /// </summary>
        public MosaicHistoryResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2Outlook.MosaicHistoryResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2Outlook.MosaicHistoryResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2Outlook.MosaicHistoryResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "management", n => { Management = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore.CreateFromDiscriminatorValue)?.AsList(); } },
                { "market", n => { Market = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore.CreateFromDiscriminatorValue)?.AsList(); } },
                { "momentum", n => { Momentum = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore.CreateFromDiscriminatorValue)?.AsList(); } },
                { "money", n => { Money = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore.CreateFromDiscriminatorValue)?.AsList(); } },
                { "overall", n => { Overall = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>(global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>("management", Management);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>("market", Market);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>("momentum", Momentum);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>("money", Money);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2Outlook.HistoricalMosaicScore>("overall", Overall);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
