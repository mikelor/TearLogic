// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2ManagementAndBoard
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Education : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The type of degree that the person received at this insitution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Degree { get; set; }
#nullable restore
#else
        public string Degree { get; set; }
#endif
        /// <summary>The CBI ID of the degree type.</summary>
        public int? DegreeId { get; set; }
        /// <summary>The name of the field of study associated with the degree.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FieldOfStudy { get; set; }
#nullable restore
#else
        public string FieldOfStudy { get; set; }
#endif
        /// <summary>The CBI ID of the field of study.</summary>
        public int? FieldOfStudyId { get; set; }
        /// <summary>The year in which the individual graduated from this institution.</summary>
        public int? GraduationYear { get; set; }
        /// <summary>The name of the educational institution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Institution { get; set; }
#nullable restore
#else
        public string Institution { get; set; }
#endif
        /// <summary>The CBI ID of the institution.</summary>
        public int? InstitutionId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2ManagementAndBoard.Education"/> and sets the default values.
        /// </summary>
        public Education()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2ManagementAndBoard.Education"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2ManagementAndBoard.Education CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2ManagementAndBoard.Education();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "degree", n => { Degree = n.GetStringValue(); } },
                { "degreeId", n => { DegreeId = n.GetIntValue(); } },
                { "fieldOfStudy", n => { FieldOfStudy = n.GetStringValue(); } },
                { "fieldOfStudyId", n => { FieldOfStudyId = n.GetIntValue(); } },
                { "graduationYear", n => { GraduationYear = n.GetIntValue(); } },
                { "institution", n => { Institution = n.GetStringValue(); } },
                { "institutionId", n => { InstitutionId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("degree", Degree);
            writer.WriteIntValue("degreeId", DegreeId);
            writer.WriteStringValue("fieldOfStudy", FieldOfStudy);
            writer.WriteIntValue("fieldOfStudyId", FieldOfStudyId);
            writer.WriteIntValue("graduationYear", GraduationYear);
            writer.WriteStringValue("institution", Institution);
            writer.WriteIntValue("institutionId", InstitutionId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
