// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2ManagementAndBoard
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Experience : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date when the individual ended this work experience, if applicable, in the format YYYY-MM-DD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>Indicates whether the individual currently occupies this position.</summary>
        public bool? IsCurrent { get; set; }
        /// <summary>The CBI organization ID of the organization for this work experience.</summary>
        public int? OrgId { get; set; }
        /// <summary>The name of the organization for this work experience.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrgName { get; set; }
#nullable restore
#else
        public string OrgName { get; set; }
#endif
        /// <summary>The date when the individual started this work experience, in the format YYYY-MM-DD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>The individual&apos;s title during this work experience.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The CBI ID of the individual&apos;s title during this work experience; see https://api-docs.cbinsights.com/docs/reference/person_titles/</summary>
        public int? TitleId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience"/> and sets the default values.
        /// </summary>
        public Experience()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "endDate", n => { EndDate = n.GetStringValue(); } },
                { "isCurrent", n => { IsCurrent = n.GetBoolValue(); } },
                { "orgId", n => { OrgId = n.GetIntValue(); } },
                { "orgName", n => { OrgName = n.GetStringValue(); } },
                { "startDate", n => { StartDate = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "titleId", n => { TitleId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("endDate", EndDate);
            writer.WriteBoolValue("isCurrent", IsCurrent);
            writer.WriteIntValue("orgId", OrgId);
            writer.WriteStringValue("orgName", OrgName);
            writer.WriteStringValue("startDate", StartDate);
            writer.WriteStringValue("title", Title);
            writer.WriteIntValue("titleId", TitleId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
