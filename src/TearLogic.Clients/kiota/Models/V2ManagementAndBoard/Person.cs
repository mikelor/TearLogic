// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2ManagementAndBoard
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Person : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Companies where the individual has been a board member.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience>? BoardAssociations { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience> BoardAssociations { get; set; }
#endif
        /// <summary>Information about degrees this individual has attained.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2ManagementAndBoard.Education>? Education { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2ManagementAndBoard.Education> Education { get; set; }
#endif
        /// <summary>Email of the individual.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>First/given name of the individual.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GivenName { get; set; }
#nullable restore
#else
        public string GivenName { get; set; }
#endif
        /// <summary>LinkedIn profile URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LinkedInUrl { get; set; }
#nullable restore
#else
        public string LinkedInUrl { get; set; }
#endif
        /// <summary>Middle name of theindividual.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MiddleName { get; set; }
#nullable restore
#else
        public string MiddleName { get; set; }
#endif
        /// <summary>CBI unique ID of the individual.</summary>
        public int? PersonId { get; set; }
        /// <summary>Last name/surname of the individual.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Surname { get; set; }
#nullable restore
#else
        public string Surname { get; set; }
#endif
        /// <summary>Work history - positions this individual has occupied.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience>? WorkExperience { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience> WorkExperience { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2ManagementAndBoard.Person"/> and sets the default values.
        /// </summary>
        public Person()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2ManagementAndBoard.Person"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2ManagementAndBoard.Person CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2ManagementAndBoard.Person();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "boardAssociations", n => { BoardAssociations = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience>(global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience.CreateFromDiscriminatorValue)?.AsList(); } },
                { "education", n => { Education = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2ManagementAndBoard.Education>(global::TearLogic.Clients.Models.V2ManagementAndBoard.Education.CreateFromDiscriminatorValue)?.AsList(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "givenName", n => { GivenName = n.GetStringValue(); } },
                { "linkedInUrl", n => { LinkedInUrl = n.GetStringValue(); } },
                { "middleName", n => { MiddleName = n.GetStringValue(); } },
                { "personId", n => { PersonId = n.GetIntValue(); } },
                { "surname", n => { Surname = n.GetStringValue(); } },
                { "workExperience", n => { WorkExperience = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience>(global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience>("boardAssociations", BoardAssociations);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2ManagementAndBoard.Education>("education", Education);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("givenName", GivenName);
            writer.WriteStringValue("linkedInUrl", LinkedInUrl);
            writer.WriteStringValue("middleName", MiddleName);
            writer.WriteIntValue("personId", PersonId);
            writer.WriteStringValue("surname", Surname);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2ManagementAndBoard.Experience>("workExperience", WorkExperience);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
