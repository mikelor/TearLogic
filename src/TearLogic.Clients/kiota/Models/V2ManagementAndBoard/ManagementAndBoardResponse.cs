// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace TearLogic.Clients.Models.V2ManagementAndBoard
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ManagementAndBoardResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Management factor of the Mosaic score that measures the pedigree, education, and work experience of the leaders of the company. https://support.cbinsights.com/hc/en-us/articles/360042055171-About-Mosaic-Health</summary>
        public int? MosaicManagement { get; set; }
        /// <summary>Individuals with general information about each individual and details about their education, work experience, and board associations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::TearLogic.Clients.Models.V2ManagementAndBoard.Person>? People { get; set; }
#nullable restore
#else
        public List<global::TearLogic.Clients.Models.V2ManagementAndBoard.Person> People { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::TearLogic.Clients.Models.V2ManagementAndBoard.ManagementAndBoardResponse"/> and sets the default values.
        /// </summary>
        public ManagementAndBoardResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::TearLogic.Clients.Models.V2ManagementAndBoard.ManagementAndBoardResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::TearLogic.Clients.Models.V2ManagementAndBoard.ManagementAndBoardResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::TearLogic.Clients.Models.V2ManagementAndBoard.ManagementAndBoardResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "mosaicManagement", n => { MosaicManagement = n.GetIntValue(); } },
                { "people", n => { People = n.GetCollectionOfObjectValues<global::TearLogic.Clients.Models.V2ManagementAndBoard.Person>(global::TearLogic.Clients.Models.V2ManagementAndBoard.Person.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("mosaicManagement", MosaicManagement);
            writer.WriteCollectionOfObjectValues<global::TearLogic.Clients.Models.V2ManagementAndBoard.Person>("people", People);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
